name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - 'Releases/*'
      - 'Assets/version.txt'  # Trigger workflow if version.txt changes

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with: 
        fetch-depth: 0  # Fetches all history for all branches and tags
        lfs: true  # Fetch Git LFS objects

    # Set Git user
    - name: Set Git user
      run: |
        git config --global user.email "Nostalgic124@live.com"
        git config --global user.name "Herpsta"

    # Check if version has changed (PowerShell version)
    - name: Check if version has changed
      run: |
        $changed = git diff --name-only HEAD^ HEAD | Select-String 'Assets/version.txt'
        if ($null -ne $changed) {
            Write-Host "Version has changed, proceeding with build."
            echo "VERSION_CHANGED=true" | Out-File -Append -FilePath $env:GITHUB_ENV
        }
        else {
            Write-Host "Version has not changed, skipping build."
            echo "VERSION_CHANGED=false" | Out-File -Append -FilePath $env:GITHUB_ENV
        }
      shell: pwsh

    # Conditionally proceed with the rest of the steps
    - name: List contents of Releases directory
      if: env.VERSION_CHANGED == 'true'
      run: ls -l ./Releases

    # Debugging: List contents of Releases directory
    - name: List contents of Releases directory
      run: ls -l ./Releases

    # Debugging: Print environment variables
    - name: Print environment variables
      run: env

    # Read version from file and set environment variable
    - name: Read version from file
      run: |
        $version = Get-Content Assets/version.txt  # Replace with the actual path
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: pwsh

    # Check if VERSION is set
    - name: Check if VERSION is set
      run: |
        if ($null -eq $env:VERSION -or $env:VERSION -eq "") {
          Write-Host "Error: VERSION is not set. Cannot create a GitHub release without a tag name."
          exit 1
        }
      shell: pwsh

    - name: Delete existing tag
      run: |
        git tag -d ${{ env.VERSION }} || true
        git push origin :refs/tags/${{ env.VERSION }} || true

    - name: Create and push new tag
      run: |
        git tag -a ${{ env.VERSION }} -m "Release ${{ env.VERSION }}"
        git push origin ${{ env.VERSION }}

    - name: Create GitHub Release
      id: Create_Zombies  # <-- Important: add an ID here
      if: env.VERSION != ''
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: 'Description of the release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      if: env.VERSION_CHANGED == 'true' && env.VERSION != ''
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # <-- Use the upload_url from create_release step
        asset_path: ./Releases/ZombieSurvivalRPG_v${{ env.VERSION }}.7z  # Replace with the actual path to your .7z file
        asset_name: ZombieSurvivalRPG_v${{ env.VERSION }}.7z  # Replace with the actual name of your .7z file
        asset_content_type: application/x-7z-compressed
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      if: env.VERSION_CHANGED == 'true' && env.VERSION != ''
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Releases/ZombieSurvivalRPG_v${{ env.VERSION }}.7z  # Dynamic path
        asset_name: ZombieSurvivalRPG_v${{ env.VERSION }}.7z  # Dynamic name
        asset_content_type: application/x-7z-compressed
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Run Unity Tests
      run: |
        # Add your Unity test commands here

    - name: Log error
      if: failure()
      run: echo "An error occurred in the previous steps"
